simulateddataset
simulateddataset$PI<-round(rnorm(20,mean=(24/simulateddataset$Urbanisation),sd=3))
simulateddataset
simulateddataset$PI<-round(rnorm(20,mean=(18/simulateddataset$Urbanisation),sd=3))
simulateddataset
# We expand our dataframe
simulateddataset<-matrix(nrow=20,ncol=4)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People","Urbanisation")
simulateddataset$Urbanisation<-round(runif(20,min=0.05,max=1)*20)
simulateddataset$PI<-round(rnorm(20,mean=(20/simulateddataset$Urbanisation),sd=3))
simulateddataset[simulateddataset$PI<0,]$PI<-0
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$Urbanisation,sd=3))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
simulateddataset$People<-round(rnorm(20,mean=simulateddataset$Urbanisation,sd=3))
simulateddataset[simulateddataset$People<0,]$People<-0
simulateddataset
plot(PI ~ People, data=simulateddataset)
plot(Cloisters~PI,data=simulateddataset)
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
plot(PI ~ People, data=simulateddataset)
plot(Cloisters~PI,data=simulateddataset)
plot(Cloisters~People,data=simulateddataset)
# Now, we run our first multivariate analysis (lm(PI) ~ cloisters + people). We don't really know what to expect here.
summary(lm(PI~Cloisters+People,data=simulateddataset))
# Now, we run our multivariate analyses. For all three multivariabe analyses, we don't really know what to expect here - it all depends on how tight the relationships are. Sometimes we would expect that only one of the associations has a p-value smaller than 0.05, and sometimes both. As above, maybe run this repeatedly to see how things change. Maybe also change the sd=3 in one or all of the code that generates the three variables based on the urbanism score higher (e.g. sd=5) or lower (e.g. sd=1) to see whether increasing or reducing noise changes the outcome.
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# Now, we run our multivariate analyses. For all three multivariabe analyses, we don't really know what to expect here - it all depends on how tight the relationships are. Sometimes we would expect that only one of the associations has a p-value smaller than 0.05, and sometimes both. As above, maybe run this repeatedly to see how things change. Maybe also change the sd=3 in one or all of the code that generates the three variables based on the urbanism score higher (e.g. sd=5) or lower (e.g. sd=1) to see whether increasing or reducing noise changes the outcome.
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=3))
# Finally, we make the number of cloisters dependent on the patriarchy index
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI,sd=3))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
plot(PI ~ People, data=simulateddataset)
plot(Cloisters~PI,data=simulateddataset)
plot(Cloisters~People,data=simulateddataset)
# We use our normal setup again
simulateddataset<-matrix(nrow=20,ncol=3)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People")
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=3))
# Finally, we make the number of cloisters dependent on the patriarchy index and the number of people
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI+(simulateddataset$People/100),sd=3))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
simulateddataset
plot(Cloisters~People,data=simulateddataset)
# In this scenario, we won't see a relationship between people and cloisters even though we simulated one, because the positive direct and the negative indirect effect generally cancel each other out
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# We use our normal setup again
simulateddataset<-matrix(nrow=20,ncol=3)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People")
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=3))
# Finally, we make the number of cloisters dependent on the patriarchy index and the number of people
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI+(simulateddataset$People/100),sd=3))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
# In this scenario, we won't see a relationship between people and cloisters even though we simulated one, because the positive direct and the negative indirect effect generally cancel each other out
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# We use our normal setup again
simulateddataset<-matrix(nrow=20,ncol=3)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People")
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=5))
# Finally, we make the number of cloisters dependent on the patriarchy index and the number of people
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI+(simulateddataset$People/100),sd=5))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
# In this scenario, we won't see a relationship between people and cloisters even though we simulated one, because the positive direct and the negative indirect effect generally cancel each other out
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# We use our normal setup again
simulateddataset<-matrix(nrow=20,ncol=3)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People")
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=5))
# Finally, we make the number of cloisters dependent on the patriarchy index and the number of people
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI+(simulateddataset$People/100),sd=5))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
# In this scenario, we won't see a relationship between people and cloisters even though we simulated one, because the positive direct and the negative indirect effect generally cancel each other out
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# We use our normal setup again
simulateddataset<-matrix(nrow=20,ncol=3)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People")
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=5))
# Finally, we make the number of cloisters dependent on the patriarchy index and the number of people
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI+(simulateddataset$People/100),sd=5))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
# In this scenario, we won't see a relationship between people and cloisters even though we simulated one, because the positive direct and the negative indirect effect generally cancel each other out
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
# We use our normal setup again
simulateddataset<-matrix(nrow=20,ncol=3)
simulateddataset<-as.data.frame(simulateddataset)
colnames(simulateddataset)<-c("PI","Cloisters","People")
# We first generate the number of people at each location
simulateddataset$People<-round(rnorm(20,mean=1000,sd=250))
# Next, we set the patriarchy index dependent on this, again with a negative relationship
simulateddataset$PI<-round(rnorm(20,mean=(10000/simulateddataset$People),sd=5))
# Finally, we make the number of cloisters dependent on the patriarchy index and the number of people
simulateddataset$Cloisters<-round(rnorm(20,mean=simulateddataset$PI+(simulateddataset$People/100),sd=5))
simulateddataset[simulateddataset$Cloisters<0,]$Cloisters<-0
# In this scenario, we won't see a relationship between people and cloisters even though we simulated one, because the positive direct and the negative indirect effect generally cancel each other out
plot(Cloisters~People,data=simulateddataset)
summary(lm(Cloisters~People,data=simulateddataset))
summary(lm(PI~Cloisters+People,data=simulateddataset))
summary(lm(Cloisters~PI+People,data=simulateddataset))
summary(lm(People~Cloisters+PI,data=simulateddataset))
library(metafor)
library(ape)
library(geiger)
library(dplyr)
library(readr)
library(orchaRd)
library(patchwork)
library(ggplot2)
library(rethinking)
inputdata<-read_csv(url("https://raw.githubusercontent.com/dieterlukas/FemaleDominanceReproduction_MetaAnalysis/trunk/Inputfiles/InputData_MetaAnalysis_FemaleDominanceReproduction.csv"))
inputdata<-data.frame(inputdata)
dat<-inputdata
dat<-dat[,c(3:32,37,36,33:35)]
head(dat)
options(width=60)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
# Load the consensus tree for the 86 species in the actual dataset
mammaltree<-read.nexus(url("https://raw.githubusercontent.com/dieterlukas/FemaleDominanceReproduction_MetaAnalysis/trunk/Inputfiles/CombinedTree_MetaAnalysis_RankSuccess.nex"))
# Some of the Latin species names in the input file do not match the species name that were used for the phylogenetic tree. We can adapt these here
#Instead of Canis familiaris we use Canis lupus
dat[dat$Latin=="Canis_familiaris",]$Latin<-"Canis_lupus"
dat[dat$Latin=="Canis_familiaris",]$Latin<-"Canis_lupus"
sort(unique(dat$Latin))
dat[dat$Latin=="Fukomys_mechowii",]$Latin<-"Fukomys_mechowi"
#Bos bison is now Bison bison
dat[dat$Latin=="Bos_bison",]$Latin<-"Bison_bison"
# For linking the phylogeny to the data, we create covariance matrices reflecting the shared phylogenetic history of pairs of species in a distance matrix
phylo_branch <- compute.brlen(mammaltree, method = "Grafen", power = 1)
phylo_cor <- vcv(phylo_branch, cor = T)
Dmat<-cophenetic(mammaltree)
# Setting up the data for the phylogenetic models in rethinking
spp_obs<-unique(dat$Latin)
spp_obs<-matrix(nrow=length(spp_obs))
rownames(spp_obs)<-unique(dat$Latin)
dat$SpeciesIncluded<-dat$Latin
notcooperative<-dat[dat$CooperativeBreeding==0,]
plot(notcooperative$Fishers_Z_r~notcooperative$MeasureType_Category)
plot(notcooperative$Fishers_Z_r~as.factor(notcooperative$MeasureType_Category))
notcooperative_lrs<-notcooperative[notcooperative$MeasureType_Category=="lifetime_reproductive_success",]
notcooperative_lrs
notcooperative_lrs[,1:15]
notcooperative_lrs[,1:20]
hist(notcooperative$Fishers_Z_r)
notcooperative_lrs[notcooperative_lrs$Latin=="Gorilla_beringei",]
notcooperative_lrs[notcooperative_lrs$Latin=="Mus_musculus",]
meta_groupsize_cooperativebreeding <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~ CooperativeBreeding*GroupSize, data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_groupsize_cooperativebreeding
meta_relatedness_cooperativebreeding <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~AverageRelatedness*CooperativeBreeding , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_relatedness_cooperativebreeding
meta_dispersal_cooperativebreeding <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~Philopatry+CooperativeBreeding , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_dispersal_notcooperativebreeding
meta_dispersal_cooperativebreeding <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~Philopatry+CooperativeBreeding , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_dispersal_cooperativebreeding
meta_dispersal_cooperativebreeding <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~Philopatry*CooperativeBreeding , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_dispersal_cooperativebreeding
meta_relatedness_dispersal <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~AverageRelatedness*Philopatry , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_relatedness_dispersal
meta_relatedness_dispersal <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~AverageRelatedness+Philopatry , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_relatedness_dispersal
meta_relatedness_dispersal <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~standardize(AverageRelatedness)+standardize(Philopatry) , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_relatedness_dispersal
meta_relatedness_dispersal <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~standardize(AverageRelatedness)+standardize(as.integer(as.factor(Philopatry))) , data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_relatedness_dispersal
meta_coalition <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~ CoalitionFormation, data=dat[dat$CooperativeBreeding==0,], method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_coalition
metafor_phylogenetic_coalition <- rma.mv(Fishers_Z_r, Variance,
mod =~CoalitionFormation,
random=list(~ 1 | SpeciesIncluded, # linking the species to the phylogeny
~ 1 | Latin, # observations from the same species might be similar to each other, even if those from closely related species are not
~ 1 | StudyRef),  # accounting for observations from the same publication
R = list(SpeciesIncluded = phylo_cor), # reflecting the phylogenetic relatedness
method="REML",
test="t",
data=dat[dat$CooperativeBreeding==0,])
metafor_phylogenetic_coalition
colnames(dat)
meta_associatedbreeding <- rma.mv(yi=Fishers_Z_r, V=Variance, mods=~ DominanceSystem*No_of_years, data=dat, method="REML", random=list(~1|StudyRef,~1|SpeciesRef))
meta_associatedbreeding
dominancedat<-dat[is.na(dat$DominanceSystem)==F,]
dat_list_dominance <- list(
N_spp = nrow(dominancedat),
Z_obs = dominancedat$Fishers_Z_r,
Z_sd = dominancedat$Variance,
D = as.integer(as.factor(dominancedat$DominanceSystem)),
Y = standardize(dominancedat$No_of_years))
rethinking_dominance_years <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu <- a+b[D]*Y,
a~normal(0,1),
b[D]~normal(0,0.5),
sigma_sq~dexp(1)
),data=dat_list_dominance)
precis(rethinking_dominance_years)
precis(rethinking_dominance_years,depth=2)
precis(rethinking_dominance_years,depth=2)[444:450,]
precis(rethinking_dominance_years,depth=2)[424:450,]
precis(rethinking_dominance_years,depth=2)[430:440,]
precis(rethinking_dominance_years,depth=2)[437:442,]
quantiles(dominancedat$No_of_years)
?quantiles
??quantiles
hist(dominancedat$No_of_years)
dominancedat<-dat[is.na(dat$DominanceSystem)==F,]
dominancedat_years<-dominancedat[dominancedat$CooperativeBreeding==0,]
dat_list_dominance <- list(
N_spp = nrow(dominancedat),
Z_obs = dominancedat$Fishers_Z_r,
Z_sd = dominancedat$Variance,
D = as.integer(as.factor(dominancedat$DominanceSystem)),
Y = standardize(dominancedat$No_of_years)
)
rethinking_dominance_years <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu <- a+b[D]*Y,
a~normal(0,1),
b[D]~normal(0,0.5),
sigma_sq~dexp(1)
),data=dat_list_dominance)
dat_list_dominance <- list(
N_spp = nrow(dominancedat_years),
Z_obs = dominancedat_years$Fishers_Z_r,
Z_sd = dominancedat_years$Variance,
D = as.integer(as.factor(dominancedat_years$DominanceSystem)),
Y = standardize(dominancedat_years$No_of_years)
)
rethinking_dominance_years <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu <- a+b[D]*Y,
a~normal(0,1),
b[D]~normal(0,0.5),
sigma_sq~dexp(1)
),data=dat_list_dominance)
table(dominancedat_years$DominanceSystem)
table(dat_list_dominance$D)
nrow(dominancedat_years)
precis(rethinking_dominance_years,depth=2)[386:392]
precis(rethinking_dominance_years,depth=2)
precis(rethinking_dominance_years,depth=2)[380:386,]
precis(rethinking_dominance_years,depth=2)[386:392,]
precis(rethinking_dominance_years,depth=2)[386:390,]
table(dominancedat_years$DominanceSystem)
plot(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Fishers_Z_r~dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$No_of_years)
colnames(dat)
plot(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Fishers_Z_r~dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$LittersPerYear)
summary(lm(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Fishers_Z_r~dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$LittersPerYear))
unique(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Latin)
sort(unique(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Latin))
boxplot(dat$LittersPerYear~dat$DominanceSystem)
setwd("~/ownCloud/Documents/FemaleDominanceHierarchies/meta_rank_success/RankSuccess")
lifespan<-read.table("Mammal_MaxLifespan.txt",header=T)
lifespan<-read.csv("Mammal_MaxLifespan.txt",header=T)
head(lifespan)
lifespan<-read.csv("Mammal_MaxLifespan.txt",header=T,sep="\t")
head(lifespan)
getwd()
setwd("~/ownCloud/Documents/GitHub/FemaleDominanceReproduction_MetaAnalysis/Manuscriptfiles")
combined<-eft_join(dat,lifespan,by="Latin")
combined<-left_join(dat,lifespan,by="Latin")
head(combined)
colnames(dat)
colnames(combined)
combined<-combined[,c(1:32,36,33:35)]
colnames(combined)
colnames(combined)<-c(colnames(combined)[1:32],"MaximumLifespan",colnames(combined)[34:36])
colnames(combined)
head(combined)
write.csv(combined,file="InputData_MetaAnalysis_FemaleDominanceReproduction.csv")
# Load input data from GitHub
inputdata<-read_csv(url("https://raw.githubusercontent.com/dieterlukas/FemaleDominanceReproduction_MetaAnalysis/trunk/Inputfiles/InputData_MetaAnalysis_FemaleDominanceReproduction.csv"))
# Load input data from GitHub
inputdata<-read_csv(url("https://raw.githubusercontent.com/dieterlukas/FemaleDominanceReproduction_MetaAnalysis/trunk/Inputfiles/InputData_MetaAnalysis_FemaleDominanceReproduction.csv"))
inputdata<-data.frame(inputdata)
# We rearrange the columns so that the dataset is easier to view, with the references at the end
dat<-dat[,c(3:32,37,36,33:35)]
dat<-inputdata
head(dat)
colnames(dat)
dominancedat<-dat[is.na(dat$DominanceSystem)==F,]
dominancedat_years<-dominancedat[dominancedat$CooperativeBreeding==0,]
dominancedat_years<-dominancedat_years[is.na(dominancedat_years$MaximumLifespan)==F,]
head(dominancedat_years)
nrow(dominancedat_years)
dominancedat_years$relativeduration<-dominancedat_years$No_of_years/(exp(dominancedat_years$MaximumLifespan))
dominancedat_years$relativeduration
rethinking_dominance_years <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu <- a+b[D]*Y,
a~normal(0,1),
b[D]~normal(0,0.5),
sigma_sq~dexp(1)
),data=dat_list_dominance)
precis(rethinking_dominance_years,depth=2)[304:308,]
precis(rethinking_dominance_years,depth=2)[309:312,]
nrow(dominancedat_years)
dat_list_dominance <- list(
N_spp = nrow(dominancedat_years),
Z_obs = dominancedat_years$Fishers_Z_r,
Z_sd = dominancedat_years$Variance,
D = as.integer(as.factor(dominancedat_years$DominanceSystem)),
Y = standardize(dominancedat_years$relativeduration)
)
rethinking_dominance_years <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu <- a+b[D]*Y,
a~normal(0,1),
b[D]~normal(0,0.5),
sigma_sq~dexp(1)
),data=dat_list_dominance)
nrow(precis(rethinking_dominance_years,depth=2))
precis(rethinking_dominance_years,depth=2)[303:308,]
plot(dominancedat_years$Fishers_Z_r~ dominancedat_years$relativeduration)
table(dominancedat_years$DominanceSystem)
exp(dominancedat_years$MaximumLifespan
)
10^(dominancedat_years$MaximumLifespan)
exp(dominancedat_years$MaximumLifespan,base=10)
?exp
sort(unique(dat$Latin))
dominancedat_years$relativeduration<-dominancedat_years$No_of_years/(10^(dominancedat_years$MaximumLifespan))
dat_list_dominance <- list(
N_spp = nrow(dominancedat_years),
Z_obs = dominancedat_years$Fishers_Z_r,
Z_sd = dominancedat_years$Variance,
D = as.integer(as.factor(dominancedat_years$DominanceSystem)),
Y = standardize(dominancedat_years$relativeduration)
)
plot(dominancedat_years$Fishers_Z_r ~ dominancedat_years$relativeduration)
rethinking_dominance_years <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu <- a+b[D]*Y,
a~normal(0,1),
b[D]~normal(0,0.5),
sigma_sq~dexp(1)
),data=dat_list_dominance)
precis(rethinking_dominance_years,depth=2)[304:308,]
plot(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Fishers_Z_r ~ dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$relativeduration)
plot(dominancedat_years[dominancedat_years$DominanceSystem=="Nepotism",]$Fishers_Z_r ~ dominancedat_years[dominancedat_years$DominanceSystem=="Nepotism",]$relativeduration)
plot(dominancedat_years[dominancedat_years$DominanceSystem=="Size",]$Fishers_Z_r ~ dominancedat_years[dominancedat_years$DominanceSystem=="Size",]$relativeduration)
plot(dominancedat_years[dominancedat_years$DominanceSystem=="Condition",]$Fishers_Z_r ~ dominancedat_years[dominancedat_years$DominanceSystem=="Condition",]$relativeduration)
sum(dominancedat_years$relativeduration<0.101)
sum(dominancedat_years$relativeduration>0.10)
271/303
median(dominancedat_years$relativeduration)
sort(unique(dominancedat_years[dominancedat_years$DominanceSystem=="Age",]$Latin))
sort(unique(dominancedat_years[dominancedat_years$DominanceSystem=="Nepotism",]$Latin))
sort(unique(dat$Lating))
sort(unique(dat$Latin))
primates<-c(Alouatta_palliata,
Ateles_paniscus,
Callithrix_jacchus,
Cebus_capucinus,
Cercopithecus_mitis,
Chlorocebus_aethiops,
Erythrocebus_patas,
Gorilla_beringei,
Lemur_catta,
Leontocebus_fuscicollis,
Leontopithecus_rosalia,
Lophocebus_albigena,
Macaca_arctoides,
Macaca_assamensis,
Macaca_mulatta,
Macaca_fascicularis,
Macaca_fuscata,
Macaca_nigra,
Macaca_radiata,
Macaca_sinica,
Macaca_sylvanus,
Mandrillus_sphinx,
Miopithecus_talapoin,
Pan_troglodytes,
Papio_anubis,
Papio_cynocephalus,
Papio_ursinus,
Propithecus_verreauxi,
Saguinus_mystax,
Saimiri_sciureus,
Sapajus_apella,
Semnopithecus_entellus,
Semnopithecus_schistaceus,
Theropithecus_gelada,
Trachypithecus_phayrei)
primates<-c("Alouatta_palliata",
"Ateles_paniscus",
"Callithrix_jacchus",
"Cebus_capucinus",
"Cercopithecus_mitis",
"Chlorocebus_aethiops",
"Erythrocebus_patas",
"Gorilla_beringei",
"Lemur_catta",
"Leontocebus_fuscicollis",
"Leontopithecus_rosalia",
"Lophocebus_albigena",
"Macaca_arctoides",
"Macaca_assamensis",
"Macaca_mulatta",
"Macaca_fascicularis",
"Macaca_fuscata",
"Macaca_nigra",
"Macaca_radiata",
"Macaca_sinica",
"Macaca_sylvanus",
"Mandrillus_sphinx",
"Miopithecus_talapoin",
"Pan_troglodytes",
"Papio_anubis",
"Papio_cynocephalus",
"Papio_ursinus",
"Propithecus_verreauxi",
"Saguinus_mystax",
"Saimiri_sciureus",
"Sapajus_apella",
"Semnopithecus_entellus",
"Semnopithecus_schistaceus",
"Theropithecus_gelada",
"Trachypithecus_phayrei")
length(primates)
primatedata<-dat[dat$Latin %in% primates,]
nrow(primatedata)
meta_simple <- rma.mv(yi=Fishers_Z_r, V=Variance, data=primatedata)
meta_simple
dat_list_simple <- list(
N_spp = nrow(primatedata),
Z_obs = primatedata$Fishers_Z_r,
Z_sd = primatedata$Variance
)
rethinking_simple <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu ~ normal(0,1),
sigma_sq~dexp(1)
),data=dat_list_simple)
precis(rethinking_simple)
rethinking_simple <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu ~ normal(0,1),
sigma_sq~dexp(1)
),data=dat_list_simple,iterations=2000)
precis(rethinking_simple)
rethinking_simple <- ulam(
alist(
Z_obs ~dnorm ( Z_true , Z_sd),
vector[N_spp]:Z_true ~ dnorm( mu , sigma_sq ),
mu ~ normal(0,1),
sigma_sq~dexp(1)
),data=dat_list_simple,iter=2000)
precis(rethinking_simple)
